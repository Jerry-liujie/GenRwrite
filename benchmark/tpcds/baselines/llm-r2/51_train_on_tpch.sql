AGGREGATE_EXPAND_DISTINCT_AGGREGATES_TO_JOIN was added successfully. AGGREGATE_JOIN_TRANSPOSE_EXTENDED was added successfully. AGGREGATE_PROJECT_MERGE was added successfully. AGGREGATE_ANY_PULL_UP_CONSTANTS was added successfully. AGGREGATE_UNION_AGGREGATE was added successfully. AGGREGATE_UNION_TRANSPOSE was added successfully. AGGREGATE_VALUES was added successfully. AGGREGATE_INSTANCE was added successfully. FILTER_AGGREGATE_TRANSPOSE was added successfully. FILTER_CORRELATE was added successfully. FILTER_INTO_JOIN was added successfully. JOIN_CONDITION_PUSH was added successfully. FILTER_MERGE was added successfully. FILTER_MULTI_JOIN_MERGE was added successfully. FILTER_PROJECT_TRANSPOSE was added successfully. FILTER_SET_OP_TRANSPOSE was added successfully. FILTER_TABLE_FUNCTION_TRANSPOSE was added successfully. FILTER_SCAN was added successfully. FILTER_REDUCE_EXPRESSIONS was added successfully. PROJECT_REDUCE_EXPRESSIONS was added successfully. FILTER_INSTANCE was added successfully. JOIN_EXTRACT_FILTER was added successfully. JOIN_PROJECT_BOTH_TRANSPOSE was added successfully. JOIN_PROJECT_LEFT_TRANSPOSE was added successfully. JOIN_PROJECT_RIGHT_TRANSPOSE was added successfully. JOIN_LEFT_UNION_TRANSPOSE was added successfully. JOIN_RIGHT_UNION_TRANSPOSE was added successfully. SEMI_JOIN_REMOVE was added successfully. JOIN_REDUCE_EXPRESSIONS was added successfully. JOIN_LEFT_INSTANCE was added successfully. JOIN_RIGHT_INSTANCE was added successfully. PROJECT_CALC_MERGE was added successfully. PROJECT_CORRELATE_TRANSPOSE was added successfully. PROJECT_MERGE was added successfully. PROJECT_MULTI_JOIN_MERGE was added successfully. PROJECT_REMOVE was added successfully. PROJECT_TO_CALC was added successfully. PROJECT_SUB_QUERY_TO_CORRELATE was added successfully. PROJECT_REDUCE_EXPRESSIONS was added successfully. PROJECT_INSTANCE was added successfully. CALC_MERGE was added successfully. CALC_REMOVE was added successfully. SORT_JOIN_TRANSPOSE was added successfully. SORT_PROJECT_TRANSPOSE was added successfully. SORT_UNION_TRANSPOSE was added successfully. SORT_REMOVE_CONSTANT_KEYS was added successfully. SORT_REMOVE was added successfully. SORT_INSTANCE was added successfully. SORT_FETCH_ZERO_INSTANCE was added successfully. UNION_MERGE was added successfully. UNION_REMOVE was added successfully. UNION_TO_DISTINCT was added successfully. UNION_PULL_UP_CONSTANTS was added successfully. UNION_INSTANCE was added successfully. INTERSECT_INSTANCE was added successfully. MINUS_INSTANCE was added successfully. LogicalSort(sort0=[0], sort1=[1], dir0=[ASC], dir1=[ASC], fetch=[100])   LogicalProject(item_sk=[0], d_date=[1], web_sales=[2], store_sales=[3], web_cumulative=[4], store_cumulative=[5])     LogicalFilter(condition=[>(4, 5)])       LogicalProject(item_sk=[CASE(IS NOT NULL(0), 0, 3)], d_date=[CASE(IS NOT NULL(1), 1, 4)], web_sales=[2], store_sales=[5], web_cumulative=[MAX(2) OVER (PARTITION BY CASE(IS NOT NULL(0), 0, 3) ORDER BY CASE(IS NOT NULL(1), 1, 4) ROWS UNBOUNDED PRECEDING)], store_cumulative=[MAX(5) OVER (PARTITION BY CASE(IS NOT NULL(0), 0, 3) ORDER BY CASE(IS NOT NULL(1), 1, 4) ROWS UNBOUNDED PRECEDING)])         LogicalJoin(condition=[AND(=(0, 3), =(1, 4))], joinType=[full])           LogicalProject(item_sk=[0], d_date=[1], cume_sales=[SUM(2) OVER (PARTITION BY 0 ORDER BY 1 ROWS UNBOUNDED PRECEDING)])             LogicalAggregate(group=[{0, 1}], agg#0=[SUM(2)])               LogicalProject(item_sk=[3], d_date=[36], ws_sales_price=[21])                 LogicalFilter(condition=[AND(=(0, 34), >=(37, 1212), <=(37, +(1212, 11)), IS NOT NULL(3))])                   LogicalJoin(condition=[true], joinType=[inner])                     LogicalTableScan(table=[[web_sales]])                     LogicalTableScan(table=[[date_dim]])           LogicalProject(item_sk=[0], d_date=[1], cume_sales=[SUM(2) OVER (PARTITION BY 0 ORDER BY 1 ROWS UNBOUNDED PRECEDING)])             LogicalAggregate(group=[{0, 1}], agg#0=[SUM(2)])               LogicalProject(item_sk=[2], d_date=[25], ss_sales_price=[13])                 LogicalFilter(condition=[AND(=(0, 23), >=(26, 1212), <=(26, +(1212, 11)), IS NOT NULL(2))])                   LogicalJoin(condition=[true], joinType=[inner])                     LogicalTableScan(table=[[store_sales]])                     LogicalTableScan(table=[[date_dim]])  LogicalSort(sort0=[0], sort1=[1], dir0=[ASC], dir1=[ASC], fetch=[100])   LogicalProject(item_sk=[0], d_date=[1], web_sales=[2], store_sales=[3], web_cumulative=[4], store_cumulative=[5])     LogicalFilter(condition=[>(4, 5)])       LogicalProject(item_sk=[CASE(IS NOT NULL(0), 0, 3)], d_date=[CASE(IS NOT NULL(1), 1, 4)], web_sales=[2], store_sales=[5], web_cumulative=[MAX(2) OVER (PARTITION BY CASE(IS NOT NULL(0), 0, 3) ORDER BY CASE(IS NOT NULL(1), 1, 4) ROWS UNBOUNDED PRECEDING)], store_cumulative=[MAX(5) OVER (PARTITION BY CASE(IS NOT NULL(0), 0, 3) ORDER BY CASE(IS NOT NULL(1), 1, 4) ROWS UNBOUNDED PRECEDING)])         LogicalJoin(condition=[AND(=(0, 3), =(1, 4))], joinType=[full])           LogicalProject(item_sk=[0], d_date=[1], cume_sales=[SUM(2) OVER (PARTITION BY 0 ORDER BY 1 ROWS UNBOUNDED PRECEDING)])             LogicalAggregate(group=[{0, 1}], agg#0=[SUM(2)])               LogicalProject(item_sk=[3], d_date=[36], ws_sales_price=[21])                 LogicalFilter(condition=[AND(=(0, 34), >=(37, 1212), <=(37, +(1212, 11)), IS NOT NULL(3))])                   LogicalJoin(condition=[true], joinType=[inner])                     LogicalTableScan(table=[[web_sales]])                     LogicalTableScan(table=[[date_dim]])           LogicalProject(item_sk=[0], d_date=[1], cume_sales=[SUM(2) OVER (PARTITION BY 0 ORDER BY 1 ROWS UNBOUNDED PRECEDING)])             LogicalAggregate(group=[{0, 1}], agg#0=[SUM(2)])               LogicalProject(item_sk=[2], d_date=[25], ss_sales_price=[13])                 LogicalFilter(condition=[AND(=(0, 23), >=(26, 1212), <=(26, +(1212, 11)), IS NOT NULL(2))])                   LogicalJoin(condition=[true], joinType=[inner])                     LogicalTableScan(table=[[store_sales]])                     LogicalTableScan(table=[[date_dim]])  No changed! WITH web_v1 as ( select   ws_item_sk item_sk, d_date,   sum(sum(ws_sales_price))       over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales from web_sales     ,date_dim where ws_sold_date_sk=d_date_sk   and d_month_seq between 1212 and 1212+11   and ws_item_sk is not NULL group by ws_item_sk, d_date), store_v1 as ( select   ss_item_sk item_sk, d_date,   sum(sum(ss_sales_price))       over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales from store_sales     ,date_dim where ss_sold_date_sk=d_date_sk   and d_month_seq between 1212 and 1212+11   and ss_item_sk is not NULL group by ss_item_sk, d_date)  select  * from (select item_sk      ,d_date      ,web_sales      ,store_sales      ,max(web_sales)          over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative      ,max(store_sales)          over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative      from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk                  ,case when web.d_date is not null then web.d_date else store.d_date end d_date                  ,web.cume_sales web_sales                  ,store.cume_sales store_sales            from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk                                                           and web.d_date = store.d_date)           )x )y where web_cumulative > store_cumulative order by item_sk         ,d_date limit 100   WITH web_v1 as ( select   ws_item_sk item_sk, d_date,   sum(sum(ws_sales_price))       over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales from web_sales     ,date_dim where ws_sold_date_sk=d_date_sk   and d_month_seq between 1212 and 1212+11   and ws_item_sk is not NULL group by ws_item_sk, d_date), store_v1 as ( select   ss_item_sk item_sk, d_date,   sum(sum(ss_sales_price))       over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales from store_sales     ,date_dim where ss_sold_date_sk=d_date_sk   and d_month_seq between 1212 and 1212+11   and ss_item_sk is not NULL group by ss_item_sk, d_date)  select  * from (select item_sk      ,d_date      ,web_sales      ,store_sales      ,max(web_sales)          over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative      ,max(store_sales)          over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative      from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk                  ,case when web.d_date is not null then web.d_date else store.d_date end d_date                  ,web.cume_sales web_sales                  ,store.cume_sales store_sales            from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk                                                           and web.d_date = store.d_date)           )x )y where web_cumulative > store_cumulative order by item_sk         ,d_date limit 100  